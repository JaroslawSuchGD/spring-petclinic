pipeline {
    agent any

    tools {
        maven 'M3'
    }

    stages {
        stage('Cloning petclinic repository') {
            steps {
                git branch: 'main', credentialsId: 'github-creds', url: 'https://github.com/JaroslawSuchGD/spring-petclinic.git'
            }
        }
        stage('Creating a git tag') {
            steps {
                script {
                    def oldVersion = sh(script: 'git tag -l | sort -V | tail -n 1', returnStdout: true).trim()
                    env.OLD_VERSION = oldVersion

                    sh 'python3 -m venv venv'
                    sh '. /var/lib/jenkins/workspace/Deployment/venv/bin/activate'
                    sh 'pip install semver'
                    sh 'pip install gitPython'

                    sh 'python3 gitTag.py'

                    sh 'rm -rf venv'
                }
            }
        }
        stage('Building artifact') {
            steps {
                script {
                    def version = sh(script: 'git tag -l | sort -V | tail -n 1', returnStdout: true).trim()
                    env.VERSION = version

                    withCredentials([usernamePassword(credentialsId: 'github-creds', passwordVariable: 'git_password', usernameVariable: 'git_username')]) {
                        sh "git push https://${git_username}:${git_password}@github.com/${git_username}/spring-petclinic ${env.VERSION}"
                    }
                    
                    sh "docker build -t ${params.REGION}-docker.pkg.dev/${params.PROJECT_ID}/spring-petclinic-registry/petclinic-app:${env.VERSION} ."
                }
            }
        }
        stage('Pushing artifact') {
            steps {
                sh "gcloud auth configure-docker ${params.REGION}-docker.pkg.dev"
                sh "docker push ${params.REGION}-docker.pkg.dev/${params.PROJECT_ID}/spring-petclinic-registry/petclinic-app:${env.VERSION}"
            }
        }

        stage('Deployment') {
            steps {
                input (
                    message: 'Proceed with deployment?',
                    ok: 'Approve deployment'
                )

                script {
                    def COMMAND = """
                        #!/bin/bash
                        sudo systemctl start docker

                        DOCKER_IMAGE=\$(docker images --filter=reference="${params.REGION}-docker.pkg.dev/${params.PROJECT_ID}/spring-petclinic-registry/petclinic-app:${env.OLD_VERSION}")
                        NETWORK=\$(docker network ls | grep 'petclinic-network')
                        if [[ -n \$DOCKER_IMAGE ]]; then
                            docker rmi ${params.REGION}-docker.pkg.dev/${params.PROJECT_ID}/spring-petclinic-registry/petclinic-app:${env.OLD_VERSION}
                        
                        fi
                        if [[ -z \$NETWORK ]]; then
                            docker network create -d bridge petclinic-network
                        fi
                            gcloud auth configure-docker ${params.REGION}-docker.pkg.dev
                            docker pull ${params.REGION}-docker.pkg.dev/${params.PROJECT_ID}/spring-petclinic-registry/petclinic-app:${env.VERSION}

                        sudo systemctl stop docker
                        sync
                        sleep 5
                    """

                    sh "gcloud compute ssh --zone=us-central1-a petclinic-instance --command='$COMMAND'"

                    build job: 'Infrastructure', parameters: [booleanParam(name: 'Destroy', value: false), string(name: 'APP_VERSION', value: env.VERSION.replace('.', '-')), booleanParam(name: 'Update', value: true)]


                    def upstreamJobName = 'Infrastructure'
                    copyArtifacts(
                        projectName: upstreamJobName,
                        selector: lastSuccessful(),
                        filter: 'lb_ip.txt',
                        target: '.'
                    )

                    def loadBalancerIP = readFile file: 'lb_ip.txt'
                    env.LB_IP = loadBalancerIP.trim()

                    def url = "ðŸš€ Deployed to <a href='http://${env.LB_IP}'>http://${env.LB_IP}</a>"
                    currentBuild.setDescription(url)

                }
            }
        }
    }
}